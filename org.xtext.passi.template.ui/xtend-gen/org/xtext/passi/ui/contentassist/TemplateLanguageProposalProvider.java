/**
 * generated by Xtext
 */
package org.xtext.passi.ui.contentassist;

import com.google.common.base.Objects;
import java.io.InputStream;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Display;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.xtext.passi.templateLanguage.Feature;
import org.xtext.passi.templateLanguage.TableDataAttribute;
import org.xtext.passi.ui.contentassist.AbstractTemplateLanguageProposalProvider;
import org.xtext.passi.ui.contentassist.TableData;
import org.xtext.passi.ui.contentassist.TemplateKeywords;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class TemplateLanguageProposalProvider extends AbstractTemplateLanguageProposalProvider {
  /**
   * Custom content assist behavior for features of Template main section
   */
  public void completeFeature_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeFeature_Name(model, assignment, context, acceptor);
    Set<String> _keySet = TemplateKeywords.map.keySet();
    for (final String key : _keySet) {
      {
        StyledString _styledString = new StyledString(key);
        ConfigurableCompletionProposal proposal = super.doCreateProposal(key, _styledString, null, 1, context);
        String _get = TemplateKeywords.hints.get(key);
        boolean _notEquals = (!Objects.equal(_get, null));
        if (_notEquals) {
          String _get_1 = TemplateKeywords.hints.get(key);
          StyledString _styledString_1 = new StyledString(_get_1);
          proposal.setAdditionalProposalInfo(_styledString_1);
        }
        Class<? extends TemplateLanguageProposalProvider> _class = this.getClass();
        ClassLoader _classLoader = _class.getClassLoader();
        InputStream is = _classLoader.getResourceAsStream("/icons/property.png");
        Display _default = Display.getDefault();
        Image _image = new Image(_default, is);
        proposal.setImage(_image);
        acceptor.accept(proposal);
      }
    }
  }
  
  public void completeFeature_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeFeature_Value(model, assignment, context, acceptor);
    if ((model instanceof Feature)) {
      Feature _cast = Feature.class.cast(model);
      final String featureName = _cast.getName();
      final String dataType = TemplateKeywords.map.get(featureName);
      String proposalHint = TemplateKeywords.hints.get(featureName);
      boolean _equals = Objects.equal(proposalHint, null);
      if (_equals) {
        proposalHint = "";
      }
      this.completeArgument(dataType, acceptor, context);
    }
  }
  
  /**
   * override completeTableData_TableDataHeaderAttributes(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
   * {
   * super.completeTableData_TableDataHeaderAttributes(model, assignment, context, acceptor)
   * 
   * 
   * for(String key : TableData.tableData_map.keySet)
   * {
   * var proposal = super.doCreateProposal(key, new StyledString(key),null,1,context);
   * 
   * if(TableData.tableData_hints.get(key) != null)
   * proposal.setAdditionalProposalInfo(new StyledString(TableData.tableData_hints.get(key)))
   * 
   * var is = class.classLoader.getResourceAsStream("/icons/property.png")
   * 
   * proposal.setImage(new Image(Display.^default,is));
   * 
   * acceptor.accept(proposal)
   * }
   * 
   * }
   * 
   * override completeTableData_TableDataValuesAttributes(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
   * {
   * super.completeTableData_TableDataValuesAttributes(model, assignment, context, acceptor)
   * completeTableData_TableDataHeaderAttributes(model, assignment, context, acceptor)
   * }
   */
  public void completeTableDataAttribute_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeTableDataAttribute_Value(model, assignment, context, acceptor);
    TableDataAttribute _cast = TableDataAttribute.class.cast(model);
    final String TableAttribute = _cast.getName();
    final String dataType = TableData.tableData_map.get(TableAttribute);
    String proposalHint = TableData.tableData_hints.get(TableAttribute);
    boolean _equals = Objects.equal(proposalHint, null);
    if (_equals) {
      proposalHint = "";
    }
    this.completeArgument(dataType, acceptor, context);
  }
  
  private void completeArgument(final String dataType, final ICompletionProposalAcceptor acceptor, final ContentAssistContext context) {
    boolean _equals = dataType.equals("STRING");
    if (_equals) {
      StyledString _styledString = new StyledString("\"\"");
      ConfigurableCompletionProposal proposal = super.doCreateProposal("\"\"", _styledString, null, 1, context);
      Class<? extends TemplateLanguageProposalProvider> _class = this.getClass();
      InputStream is = _class.getResourceAsStream("/icons/ui-text-field.png");
      Display _default = Display.getDefault();
      Image _image = new Image(_default, is);
      proposal.setImage(_image);
      acceptor.accept(proposal);
    } else {
      boolean _equals_1 = dataType.equals("BOOLEAN");
      if (_equals_1) {
        StyledString _styledString_1 = new StyledString("true");
        ConfigurableCompletionProposal proposal_1 = super.doCreateProposal("true", _styledString_1, null, 1, context);
        Class<? extends TemplateLanguageProposalProvider> _class_1 = this.getClass();
        ClassLoader _classLoader = _class_1.getClassLoader();
        InputStream is_1 = _classLoader.getResourceAsStream("/icons/status.png");
        Display _default_1 = Display.getDefault();
        Image _image_1 = new Image(_default_1, is_1);
        proposal_1.setImage(_image_1);
        acceptor.accept(proposal_1);
        StyledString _styledString_2 = new StyledString("false");
        ConfigurableCompletionProposal _doCreateProposal = super.doCreateProposal("false", _styledString_2, null, 1, context);
        proposal_1 = _doCreateProposal;
        Class<? extends TemplateLanguageProposalProvider> _class_2 = this.getClass();
        ClassLoader _classLoader_1 = _class_2.getClassLoader();
        InputStream _resourceAsStream = _classLoader_1.getResourceAsStream("/icons/status-busy.png");
        is_1 = _resourceAsStream;
        Display _default_2 = Display.getDefault();
        Image _image_2 = new Image(_default_2, is_1);
        proposal_1.setImage(_image_2);
        acceptor.accept(proposal_1);
      } else {
        boolean _equals_2 = dataType.equals("INT");
        if (_equals_2) {
          StyledString _styledString_3 = new StyledString("123");
          ConfigurableCompletionProposal proposal_2 = super.doCreateProposal("123", _styledString_3, null, 1, context);
          Class<? extends TemplateLanguageProposalProvider> _class_3 = this.getClass();
          ClassLoader _classLoader_2 = _class_3.getClassLoader();
          InputStream is_2 = _classLoader_2.getResourceAsStream("/icons/abacus.png");
          Display _default_3 = Display.getDefault();
          Image _image_3 = new Image(_default_3, is_2);
          proposal_2.setImage(_image_3);
          acceptor.accept(proposal_2);
        }
      }
    }
  }
}
