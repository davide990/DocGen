/*
* generated by Xtext
*/
package org.xtext.passi.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.passi.services.TemplateLanguageGrammarAccess;

public class TemplateLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private TemplateLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.passi.ui.contentassist.antlr.internal.InternalTemplateLanguageParser createParser() {
		org.xtext.passi.ui.contentassist.antlr.internal.InternalTemplateLanguageParser result = new org.xtext.passi.ui.contentassist.antlr.internal.InternalTemplateLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getTableDataAccess().getAlternatives_5(), "rule__TableData__Alternatives_5");
					put(grammarAccess.getTableSectionAccess().getNameAlternatives_1_0(), "rule__TableSection__NameAlternatives_1_0");
					put(grammarAccess.getTableDataAttributeAccess().getAlternatives(), "rule__TableDataAttribute__Alternatives");
					put(grammarAccess.getAttributeValueAccess().getAlternatives(), "rule__AttributeValue__Alternatives");
					put(grammarAccess.getTemplateAccess().getGroup(), "rule__Template__Group__0");
					put(grammarAccess.getFeatureAccess().getGroup_0(), "rule__Feature__Group_0__0");
					put(grammarAccess.getTableDataAccess().getGroup(), "rule__TableData__Group__0");
					put(grammarAccess.getTableSectionAccess().getGroup(), "rule__TableSection__Group__0");
					put(grammarAccess.getTableDataAttributeAccess().getGroup_0(), "rule__TableDataAttribute__Group_0__0");
					put(grammarAccess.getListAttributeAccess().getGroup(), "rule__ListAttribute__Group__0");
					put(grammarAccess.getListAttributeAccess().getGroup_3(), "rule__ListAttribute__Group_3__0");
					put(grammarAccess.getListAttributeAccess().getGroup_3_1(), "rule__ListAttribute__Group_3_1__0");
					put(grammarAccess.getAttributeListAccess().getGroup(), "rule__AttributeList__Group__0");
					put(grammarAccess.getAttributeListAccess().getGroup_1(), "rule__AttributeList__Group_1__0");
					put(grammarAccess.getAttributeListAccess().getGroup_1_1(), "rule__AttributeList__Group_1_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getTemplateAccess().getNameAssignment_1(), "rule__Template__NameAssignment_1");
					put(grammarAccess.getTemplateAccess().getFeaturesAssignment_3(), "rule__Template__FeaturesAssignment_3");
					put(grammarAccess.getFeatureAccess().getNameAssignment_0_0(), "rule__Feature__NameAssignment_0_0");
					put(grammarAccess.getFeatureAccess().getValueAssignment_0_2(), "rule__Feature__ValueAssignment_0_2");
					put(grammarAccess.getTableDataAccess().getNameAssignment_3(), "rule__TableData__NameAssignment_3");
					put(grammarAccess.getTableDataAccess().getTableDataAttributesAssignment_5_0(), "rule__TableData__TableDataAttributesAssignment_5_0");
					put(grammarAccess.getTableDataAccess().getSectionsAssignment_5_1(), "rule__TableData__SectionsAssignment_5_1");
					put(grammarAccess.getTableSectionAccess().getNameAssignment_1(), "rule__TableSection__NameAssignment_1");
					put(grammarAccess.getTableSectionAccess().getAttributesAssignment_3(), "rule__TableSection__AttributesAssignment_3");
					put(grammarAccess.getTableDataAttributeAccess().getNameAssignment_0_0(), "rule__TableDataAttribute__NameAssignment_0_0");
					put(grammarAccess.getTableDataAttributeAccess().getValueAssignment_0_2(), "rule__TableDataAttribute__ValueAssignment_0_2");
					put(grammarAccess.getListAttributeAccess().getNameAssignment_0(), "rule__ListAttribute__NameAssignment_0");
					put(grammarAccess.getListAttributeAccess().getValuesAssignment_3_0(), "rule__ListAttribute__ValuesAssignment_3_0");
					put(grammarAccess.getListAttributeAccess().getValuesAssignment_3_1_1(), "rule__ListAttribute__ValuesAssignment_3_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.passi.ui.contentassist.antlr.internal.InternalTemplateLanguageParser typedParser = (org.xtext.passi.ui.contentassist.antlr.internal.InternalTemplateLanguageParser) parser;
			typedParser.entryRuleTemplate();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TemplateLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TemplateLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
