/**
 * generated by Xtext
 */
package org.xtext.passi.generator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class TemplateLanguageGenerator implements IGenerator {
  private String templateTitle;
  
  private String supportedExtension;
  
  private String documentationTitle;
  
  private String diagramImageFile;
  
  private String documentationStyle;
  
  private String keyEClass;
  
  private boolean tableBorder;
  
  private boolean titleSeparator;
  
  private boolean includeDiagramImage;
  
  private HashMap<String,List<String>> excludedFeatures;
  
  private HashMap<String,String> featureOrder;
  
  private HashMap<String,String> headerFields;
  
  private List<String> excludedEClasses;
  
  public TemplateLanguageGenerator() {
    this.tableBorder = false;
    this.titleSeparator = false;
    this.includeDiagramImage = false;
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
  }
  
  public List<String> setExcludedEClasses(final List<String> l) {
    return this.excludedEClasses = l;
  }
  
  public HashMap<String,List<String>> setExcludedFeatures(final HashMap<String,List<String>> s) {
    return this.excludedFeatures = s;
  }
  
  public HashMap<String,String> setFeaturesOrder(final HashMap<String,String> s) {
    return this.featureOrder = s;
  }
  
  public String setTemplateTitle(final String s) {
    return this.templateTitle = s;
  }
  
  public String setSupportedExtension(final String s) {
    return this.supportedExtension = s;
  }
  
  public String setDocumentationTitle(final String s) {
    return this.documentationTitle = s;
  }
  
  public boolean setTitleSeparator(final boolean v) {
    return this.titleSeparator = v;
  }
  
  public boolean setIncludeDiagramImage(final boolean v) {
    return this.includeDiagramImage = v;
  }
  
  public String setDiagramImageFile(final String s) {
    return this.diagramImageFile = s;
  }
  
  public String setDocumentationStyle(final String s) {
    return this.documentationStyle = s;
  }
  
  public String setKeyEClass(final String s) {
    return this.keyEClass = s;
  }
  
  public HashMap<String,String> setHeaderFields(final HashMap<String,String> s) {
    return this.headerFields = s;
  }
  
  public boolean setTableBorder(final boolean v) {
    return this.tableBorder = v;
  }
  
  public CharSequence generateTemplate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("template ");
    _builder.append(this.templateTitle, "");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    {
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(this.supportedExtension);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        _builder.append("\t");
        _builder.append("outputFileNameExtension:\"");
        _builder.append(this.supportedExtension, "\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(this.supportedExtension);
      boolean _not_1 = (!_isNullOrEmpty_1);
      if (_not_1) {
        _builder.append("\t");
        _builder.append("documentationTitle:\"");
        _builder.append(this.documentationTitle, "\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("titleSeparator:");
    String _string = Boolean.valueOf(this.titleSeparator).toString();
    _builder.append(_string, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("includeDiagramImage:");
    String _string_1 = Boolean.valueOf(this.includeDiagramImage).toString();
    _builder.append(_string_1, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(this.supportedExtension);
      boolean _not_2 = (!_isNullOrEmpty_2);
      if (_not_2) {
        _builder.append("\t");
        _builder.append("diagramImageFile:\"");
        _builder.append(this.diagramImageFile, "\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isNullOrEmpty_3 = StringExtensions.isNullOrEmpty(this.supportedExtension);
      boolean _not_3 = (!_isNullOrEmpty_3);
      if (_not_3) {
        _builder.append("\t");
        _builder.append("documentationStyle:\"");
        _builder.append(this.documentationStyle, "\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isNullOrEmpty_4 = StringExtensions.isNullOrEmpty(this.supportedExtension);
      boolean _not_4 = (!_isNullOrEmpty_4);
      if (_not_4) {
        _builder.append("\t");
        _builder.append("keyEClass:\"");
        _builder.append(this.keyEClass, "\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    CharSequence _addExcludedEClasses = this.addExcludedEClasses();
    _builder.append(_addExcludedEClasses, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _addTableDataSections = this.addTableDataSections();
    _builder.append(_addTableDataSections, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence addExcludedEClasses() {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final String s : this.excludedEClasses) {
        _builder.append("excludedEClass:\"");
        _builder.append(s, "");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private String addQuotes(final String s) {
    StringBuilder sb = new StringBuilder();
    String[] _split = s.split(",");
    for (final String v : _split) {
      {
        sb.append((("\"" + v) + "\""));
        sb.append(",");
      }
    }
    String st = sb.toString();
    boolean _endsWith = st.endsWith(",");
    if (_endsWith) {
      int _length = st.length();
      int _minus = (_length - 1);
      String _substring = st.substring(0, _minus);
      st = _substring;
    }
    return st;
  }
  
  private List<String> getKeySetForDataSections() {
    Set<String> keySet = this.featureOrder.keySet();
    Set<String> excludedFeaturesKeySet = this.excludedFeatures.keySet();
    ArrayList<String> merged = new ArrayList<String>();
    boolean _isNullOrEmpty = IterableExtensions.isNullOrEmpty(keySet);
    boolean _not = (!_isNullOrEmpty);
    if (_not) {
      for (final String s : keySet) {
        boolean _contains = merged.contains(s);
        boolean _not_1 = (!_contains);
        if (_not_1) {
          merged.add(s);
        }
      }
    }
    boolean _isNullOrEmpty_1 = IterableExtensions.isNullOrEmpty(excludedFeaturesKeySet);
    boolean _not_2 = (!_isNullOrEmpty_1);
    if (_not_2) {
      for (final String s_1 : excludedFeaturesKeySet) {
        boolean _contains_1 = merged.contains(s_1);
        boolean _not_3 = (!_contains_1);
        if (_not_3) {
          merged.add(s_1);
        }
      }
    }
    return merged;
  }
  
  private CharSequence addTableDataSections() {
    StringConcatenation _builder = new StringConcatenation();
    List<String> keySet = this.getKeySetForDataSections();
    _builder.newLineIfNotEmpty();
    {
      boolean _isNullOrEmpty = IterableExtensions.isNullOrEmpty(keySet);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        {
          for(final String s : keySet) {
            _builder.append("tableData for ");
            _builder.append(s, "");
            _builder.newLineIfNotEmpty();
            _builder.append("{");
            _builder.newLine();
            _builder.append("\t");
            String order = this.featureOrder.get(s);
            _builder.newLineIfNotEmpty();
            {
              boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(order);
              boolean _not_1 = (!_isNullOrEmpty_1);
              if (_not_1) {
                _builder.append("\t");
                _builder.append("featuresOrder:{");
                String _addQuotes = this.addQuotes(order);
                _builder.append(_addQuotes, "\t");
                _builder.append("};");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            List<String> excludedFeature = this.excludedFeatures.get(s);
            _builder.newLineIfNotEmpty();
            {
              boolean _isNullOrEmpty_2 = IterableExtensions.isNullOrEmpty(excludedFeature);
              boolean _not_2 = (!_isNullOrEmpty_2);
              if (_not_2) {
                {
                  for(final String f : excludedFeature) {
                    _builder.append("\t");
                    _builder.append("excludeFeature:\"");
                    _builder.append(f, "\t");
                    _builder.append("\";");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  boolean _containsKey = this.headerFields.containsKey(s);
                  if (_containsKey) {
                    _builder.append("\t");
                    _builder.append("headerField:");
                    String _get = this.headerFields.get(s);
                    String _addQuotes_1 = this.addQuotes(_get);
                    _builder.append(_addQuotes_1, "\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
}
