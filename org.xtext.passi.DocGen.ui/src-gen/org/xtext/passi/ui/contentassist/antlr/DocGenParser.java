/*
* generated by Xtext
*/
package org.xtext.passi.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.passi.services.DocGenGrammarAccess;

public class DocGenParser extends AbstractContentAssistParser {
	
	@Inject
	private DocGenGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.passi.ui.contentassist.antlr.internal.InternalDocGenParser createParser() {
		org.xtext.passi.ui.contentassist.antlr.internal.InternalDocGenParser result = new org.xtext.passi.ui.contentassist.antlr.internal.InternalDocGenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives_0_1(), "rule__Element__Alternatives_0_1");
					put(grammarAccess.getTagNameAccess().getAlternatives(), "rule__TagName__Alternatives");
					put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getElementAccess().getGroup_0(), "rule__Element__Group_0__0");
					put(grammarAccess.getStartTagAccess().getGroup(), "rule__StartTag__Group__0");
					put(grammarAccess.getEndTagAccess().getGroup(), "rule__EndTag__Group__0");
					put(grammarAccess.getEmptyElementAccess().getGroup(), "rule__EmptyElement__Group__0");
					put(grammarAccess.getPrologTagAccess().getGroup(), "rule__PrologTag__Group__0");
					put(grammarAccess.getTagNameAccess().getGroup_1(), "rule__TagName__Group_1__0");
					put(grammarAccess.getAttributeAccess().getGroup_0(), "rule__Attribute__Group_0__0");
					put(grammarAccess.getAttributeAccess().getGroup_1(), "rule__Attribute__Group_1__0");
					put(grammarAccess.getModelAccess().getPrologAssignment_0(), "rule__Model__PrologAssignment_0");
					put(grammarAccess.getModelAccess().getXmldocAssignment_1(), "rule__Model__XmldocAssignment_1");
					put(grammarAccess.getElementAccess().getStartAssignment_0_0(), "rule__Element__StartAssignment_0_0");
					put(grammarAccess.getElementAccess().getInnerElementAssignment_0_1_0(), "rule__Element__InnerElementAssignment_0_1_0");
					put(grammarAccess.getElementAccess().getEndAssignment_0_2(), "rule__Element__EndAssignment_0_2");
					put(grammarAccess.getStartTagAccess().getTagNameAssignment_1(), "rule__StartTag__TagNameAssignment_1");
					put(grammarAccess.getStartTagAccess().getAttributesAssignment_2(), "rule__StartTag__AttributesAssignment_2");
					put(grammarAccess.getEndTagAccess().getTagNameAssignment_1(), "rule__EndTag__TagNameAssignment_1");
					put(grammarAccess.getEmptyElementAccess().getTagNameAssignment_1(), "rule__EmptyElement__TagNameAssignment_1");
					put(grammarAccess.getEmptyElementAccess().getAttributesAssignment_2(), "rule__EmptyElement__AttributesAssignment_2");
					put(grammarAccess.getPrologTagAccess().getNameAssignment_1(), "rule__PrologTag__NameAssignment_1");
					put(grammarAccess.getPrologTagAccess().getAttributesAssignment_2(), "rule__PrologTag__AttributesAssignment_2");
					put(grammarAccess.getTagNameAccess().getNameAssignment_0(), "rule__TagName__NameAssignment_0");
					put(grammarAccess.getTagNameAccess().getNameAssignment_1_0(), "rule__TagName__NameAssignment_1_0");
					put(grammarAccess.getTagNameAccess().getRightNameAssignment_1_2(), "rule__TagName__RightNameAssignment_1_2");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0_0(), "rule__Attribute__NameAssignment_0_0");
					put(grammarAccess.getAttributeAccess().getValAssignment_0_2(), "rule__Attribute__ValAssignment_0_2");
					put(grammarAccess.getAttributeAccess().getNameAssignment_1_0(), "rule__Attribute__NameAssignment_1_0");
					put(grammarAccess.getAttributeAccess().getRightNameAssignment_1_2(), "rule__Attribute__RightNameAssignment_1_2");
					put(grammarAccess.getAttributeAccess().getValAssignment_1_4(), "rule__Attribute__ValAssignment_1_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.passi.ui.contentassist.antlr.internal.InternalDocGenParser typedParser = (org.xtext.passi.ui.contentassist.antlr.internal.InternalDocGenParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DocGenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DocGenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
