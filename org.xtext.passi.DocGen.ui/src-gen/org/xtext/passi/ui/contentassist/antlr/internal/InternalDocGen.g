/*
* generated by Xtext
*/
grammar InternalDocGen;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.passi.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.passi.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.passi.services.DocGenGrammarAccess;

}

@parser::members {
 
 	private DocGenGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DocGenGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelement
entryRuleelement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleelement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule element
ruleelement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestartTag
entryRulestartTag 
:
{ before(grammarAccess.getStartTagRule()); }
	 rulestartTag
{ after(grammarAccess.getStartTagRule()); } 
	 EOF 
;

// Rule startTag
rulestartTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStartTagAccess().getGroup()); }
(rule__StartTag__Group__0)
{ after(grammarAccess.getStartTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleendTag
entryRuleendTag 
:
{ before(grammarAccess.getEndTagRule()); }
	 ruleendTag
{ after(grammarAccess.getEndTagRule()); } 
	 EOF 
;

// Rule endTag
ruleendTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEndTagAccess().getGroup()); }
(rule__EndTag__Group__0)
{ after(grammarAccess.getEndTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleemptyElement
entryRuleemptyElement 
:
{ before(grammarAccess.getEmptyElementRule()); }
	 ruleemptyElement
{ after(grammarAccess.getEmptyElementRule()); } 
	 EOF 
;

// Rule emptyElement
ruleemptyElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEmptyElementAccess().getGroup()); }
(rule__EmptyElement__Group__0)
{ after(grammarAccess.getEmptyElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleprologTag
entryRuleprologTag 
:
{ before(grammarAccess.getPrologTagRule()); }
	 ruleprologTag
{ after(grammarAccess.getPrologTagRule()); } 
	 EOF 
;

// Rule prologTag
ruleprologTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrologTagAccess().getGroup()); }
(rule__PrologTag__Group__0)
{ after(grammarAccess.getPrologTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTagName
entryRuleTagName 
:
{ before(grammarAccess.getTagNameRule()); }
	 ruleTagName
{ after(grammarAccess.getTagNameRule()); } 
	 EOF 
;

// Rule TagName
ruleTagName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTagNameAccess().getAlternatives()); }
(rule__TagName__Alternatives)
{ after(grammarAccess.getTagNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getAlternatives()); }
(rule__Attribute__Alternatives)
{ after(grammarAccess.getAttributeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getGroup_0()); }
(rule__Element__Group_0__0)
{ after(grammarAccess.getElementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getEmptyElementParserRuleCall_1()); }
	ruleemptyElement
{ after(grammarAccess.getElementAccess().getEmptyElementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getInnerElementAssignment_0_1_0()); }
(rule__Element__InnerElementAssignment_0_1_0)
{ after(grammarAccess.getElementAccess().getInnerElementAssignment_0_1_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getIDTerminalRuleCall_0_1_1()); }
	RULE_ID
{ after(grammarAccess.getElementAccess().getIDTerminalRuleCall_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TagName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagNameAccess().getNameAssignment_0()); }
(rule__TagName__NameAssignment_0)
{ after(grammarAccess.getTagNameAccess().getNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getTagNameAccess().getGroup_1()); }
(rule__TagName__Group_1__0)
{ after(grammarAccess.getTagNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getGroup_0()); }
(rule__Attribute__Group_0__0)
{ after(grammarAccess.getAttributeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAttributeAccess().getGroup_1()); }
(rule__Attribute__Group_1__0)
{ after(grammarAccess.getAttributeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPrologAssignment_0()); }
(rule__Model__PrologAssignment_0)
{ after(grammarAccess.getModelAccess().getPrologAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getXmldocAssignment_1()); }
(rule__Model__XmldocAssignment_1)*
{ after(grammarAccess.getModelAccess().getXmldocAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Element__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group_0__0__Impl
	rule__Element__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getStartAssignment_0_0()); }
(rule__Element__StartAssignment_0_0)
{ after(grammarAccess.getElementAccess().getStartAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group_0__1__Impl
	rule__Element__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getAlternatives_0_1()); }
(rule__Element__Alternatives_0_1)*
{ after(grammarAccess.getElementAccess().getAlternatives_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getEndAssignment_0_2()); }
(rule__Element__EndAssignment_0_2)
{ after(grammarAccess.getElementAccess().getEndAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StartTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StartTag__Group__0__Impl
	rule__StartTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartTagAccess().getTAG_START_OPENTerminalRuleCall_0()); }
	RULE_TAG_START_OPEN
{ after(grammarAccess.getStartTagAccess().getTAG_START_OPENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StartTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StartTag__Group__1__Impl
	rule__StartTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartTagAccess().getTagNameAssignment_1()); }
(rule__StartTag__TagNameAssignment_1)
{ after(grammarAccess.getStartTagAccess().getTagNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StartTag__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StartTag__Group__2__Impl
	rule__StartTag__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTag__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartTagAccess().getAttributesAssignment_2()); }
(rule__StartTag__AttributesAssignment_2)*
{ after(grammarAccess.getStartTagAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StartTag__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StartTag__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTag__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartTagAccess().getTAG_CLOSETerminalRuleCall_3()); }
	RULE_TAG_CLOSE
{ after(grammarAccess.getStartTagAccess().getTAG_CLOSETerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EndTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EndTag__Group__0__Impl
	rule__EndTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndTagAccess().getTAG_END_OPENTerminalRuleCall_0()); }
	RULE_TAG_END_OPEN
{ after(grammarAccess.getEndTagAccess().getTAG_END_OPENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EndTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EndTag__Group__1__Impl
	rule__EndTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndTagAccess().getTagNameAssignment_1()); }
(rule__EndTag__TagNameAssignment_1)
{ after(grammarAccess.getEndTagAccess().getTagNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EndTag__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EndTag__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTag__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndTagAccess().getTAG_CLOSETerminalRuleCall_2()); }
	RULE_TAG_CLOSE
{ after(grammarAccess.getEndTagAccess().getTAG_CLOSETerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EmptyElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyElement__Group__0__Impl
	rule__EmptyElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyElementAccess().getTAG_START_OPENTerminalRuleCall_0()); }
	RULE_TAG_START_OPEN
{ after(grammarAccess.getEmptyElementAccess().getTAG_START_OPENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyElement__Group__1__Impl
	rule__EmptyElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyElementAccess().getTagNameAssignment_1()); }
(rule__EmptyElement__TagNameAssignment_1)
{ after(grammarAccess.getEmptyElementAccess().getTagNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyElement__Group__2__Impl
	rule__EmptyElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyElementAccess().getAttributesAssignment_2()); }
(rule__EmptyElement__AttributesAssignment_2)*
{ after(grammarAccess.getEmptyElementAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EmptyElement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EmptyElement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyElement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyElementAccess().getTAG_EMPTY_CLOSETerminalRuleCall_3()); }
	RULE_TAG_EMPTY_CLOSE
{ after(grammarAccess.getEmptyElementAccess().getTAG_EMPTY_CLOSETerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PrologTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrologTag__Group__0__Impl
	rule__PrologTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrologTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrologTagAccess().getPROLOG_STARTTerminalRuleCall_0()); }
	RULE_PROLOG_START
{ after(grammarAccess.getPrologTagAccess().getPROLOG_STARTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrologTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrologTag__Group__1__Impl
	rule__PrologTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrologTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrologTagAccess().getNameAssignment_1()); }
(rule__PrologTag__NameAssignment_1)
{ after(grammarAccess.getPrologTagAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrologTag__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrologTag__Group__2__Impl
	rule__PrologTag__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrologTag__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrologTagAccess().getAttributesAssignment_2()); }
(rule__PrologTag__AttributesAssignment_2)*
{ after(grammarAccess.getPrologTagAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrologTag__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrologTag__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrologTag__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrologTagAccess().getPROLOG_ENDTerminalRuleCall_3()); }
	RULE_PROLOG_END
{ after(grammarAccess.getPrologTagAccess().getPROLOG_ENDTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TagName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagName__Group_1__0__Impl
	rule__TagName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TagName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagNameAccess().getNameAssignment_1_0()); }
(rule__TagName__NameAssignment_1_0)
{ after(grammarAccess.getTagNameAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TagName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagName__Group_1__1__Impl
	rule__TagName__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TagName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagNameAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getTagNameAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TagName__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagName__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TagName__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagNameAccess().getRightNameAssignment_1_2()); }
(rule__TagName__RightNameAssignment_1_2)
{ after(grammarAccess.getTagNameAccess().getRightNameAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Attribute__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_0__0__Impl
	rule__Attribute__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_0_0()); }
(rule__Attribute__NameAssignment_0_0)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_0__1__Impl
	rule__Attribute__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_0_1()); }

	'=' 

{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValAssignment_0_2()); }
(rule__Attribute__ValAssignment_0_2)
{ after(grammarAccess.getAttributeAccess().getValAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Attribute__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_1__0__Impl
	rule__Attribute__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_1_0()); }
(rule__Attribute__NameAssignment_1_0)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_1__1__Impl
	rule__Attribute__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getAttributeAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_1__2__Impl
	rule__Attribute__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getRightNameAssignment_1_2()); }
(rule__Attribute__RightNameAssignment_1_2)
{ after(grammarAccess.getAttributeAccess().getRightNameAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_1__3__Impl
	rule__Attribute__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1_3()); }

	'=' 

{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValAssignment_1_4()); }
(rule__Attribute__ValAssignment_1_4)
{ after(grammarAccess.getAttributeAccess().getValAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__Model__PrologAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPrologPrologTagParserRuleCall_0_0()); }
	ruleprologTag{ after(grammarAccess.getModelAccess().getPrologPrologTagParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__XmldocAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getXmldocElementParserRuleCall_1_0()); }
	ruleelement{ after(grammarAccess.getModelAccess().getXmldocElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__StartAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getStartStartTagParserRuleCall_0_0_0()); }
	rulestartTag{ after(grammarAccess.getElementAccess().getStartStartTagParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__InnerElementAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getInnerElementElementParserRuleCall_0_1_0_0()); }
	ruleelement{ after(grammarAccess.getElementAccess().getInnerElementElementParserRuleCall_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__EndAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getEndEndTagParserRuleCall_0_2_0()); }
	ruleendTag{ after(grammarAccess.getElementAccess().getEndEndTagParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StartTag__TagNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartTagAccess().getTagNameTagNameParserRuleCall_1_0()); }
	ruleTagName{ after(grammarAccess.getStartTagAccess().getTagNameTagNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StartTag__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStartTagAccess().getAttributesAttributeParserRuleCall_2_0()); }
	ruleAttribute{ after(grammarAccess.getStartTagAccess().getAttributesAttributeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EndTag__TagNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndTagAccess().getTagNameTagNameParserRuleCall_1_0()); }
	ruleTagName{ after(grammarAccess.getEndTagAccess().getTagNameTagNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyElement__TagNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyElementAccess().getTagNameTagNameParserRuleCall_1_0()); }
	ruleTagName{ after(grammarAccess.getEmptyElementAccess().getTagNameTagNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyElement__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyElementAccess().getAttributesAttributeParserRuleCall_2_0()); }
	ruleAttribute{ after(grammarAccess.getEmptyElementAccess().getAttributesAttributeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrologTag__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrologTagAccess().getNameXmlKeyword_1_0()); }
(
{ before(grammarAccess.getPrologTagAccess().getNameXmlKeyword_1_0()); }

	'xml' 

{ after(grammarAccess.getPrologTagAccess().getNameXmlKeyword_1_0()); }
)

{ after(grammarAccess.getPrologTagAccess().getNameXmlKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrologTag__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrologTagAccess().getAttributesAttributeParserRuleCall_2_0()); }
	ruleAttribute{ after(grammarAccess.getPrologTagAccess().getAttributesAttributeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TagName__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagNameAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTagNameAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TagName__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagNameAccess().getNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getTagNameAccess().getNameIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TagName__RightNameAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagNameAccess().getRightNameIDTerminalRuleCall_1_2_0()); }
	RULE_ID{ after(grammarAccess.getTagNameAccess().getRightNameIDTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ValAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValSTRINGTerminalRuleCall_0_2_0()); }
	RULE_STRING{ after(grammarAccess.getAttributeAccess().getValSTRINGTerminalRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__RightNameAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getRightNameIDTerminalRuleCall_1_2_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getRightNameIDTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ValAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValSTRINGTerminalRuleCall_1_4_0()); }
	RULE_STRING{ after(grammarAccess.getAttributeAccess().getValSTRINGTerminalRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_PROLOG_START : '<?';

RULE_PROLOG_END : '?>';

RULE_TAG_START_OPEN : '<';

RULE_TAG_END_OPEN : '</';

RULE_TAG_CLOSE : '>';

RULE_TAG_EMPTY_CLOSE : '/>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


