/*
* generated by Xtext
*/
grammar InternalDocGen;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.passi.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.passi.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.passi.services.DocGenGrammarAccess;

}

@parser::members {

 	private DocGenGrammarAccess grammarAccess;
 	
    public InternalDocGenParser(TokenStream input, DocGenGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DocGenGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPrologPrologTagParserRuleCall_0_0()); 
	    }
		lv_prolog_0_0=ruleprologTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"prolog",
        		lv_prolog_0_0, 
        		"prologTag");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getXmldocElementParserRuleCall_1_0()); 
	    }
		lv_xmldoc_1_0=ruleelement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"xmldoc",
        		lv_xmldoc_1_0, 
        		"element");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleelement
entryRuleelement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleelement=ruleelement 
	 { $current=$iv_ruleelement.current; } 
	 EOF 
;

// Rule element
ruleelement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getElementAccess().getStartStartTagParserRuleCall_0_0_0()); 
	    }
		lv_Start_0_0=rulestartTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementRule());
	        }
       		set(
       			$current, 
       			"Start",
        		lv_Start_0_0, 
        		"startTag");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getElementAccess().getInnerElementElementParserRuleCall_0_1_0_0()); 
	    }
		lv_innerElement_1_0=ruleelement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementRule());
	        }
       		add(
       			$current, 
       			"innerElement",
        		lv_innerElement_1_0, 
        		"element");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |this_ID_2=RULE_ID
    { 
    newLeafNode(this_ID_2, grammarAccess.getElementAccess().getIDTerminalRuleCall_0_1_1()); 
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getElementAccess().getEndEndTagParserRuleCall_0_2_0()); 
	    }
		lv_End_3_0=ruleendTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementRule());
	        }
       		set(
       			$current, 
       			"End",
        		lv_End_3_0, 
        		"endTag");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getEmptyElementParserRuleCall_1()); 
    }
    this_emptyElement_4=ruleemptyElement
    { 
        $current = $this_emptyElement_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulestartTag
entryRulestartTag returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStartTagRule()); }
	 iv_rulestartTag=rulestartTag 
	 { $current=$iv_rulestartTag.current; } 
	 EOF 
;

// Rule startTag
rulestartTag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_TAG_START_OPEN_0=RULE_TAG_START_OPEN
    { 
    newLeafNode(this_TAG_START_OPEN_0, grammarAccess.getStartTagAccess().getTAG_START_OPENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStartTagAccess().getTagNameTagNameParserRuleCall_1_0()); 
	    }
		lv_tagName_1_0=ruleTagName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStartTagRule());
	        }
       		set(
       			$current, 
       			"tagName",
        		lv_tagName_1_0, 
        		"TagName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStartTagAccess().getAttributesAttributeParserRuleCall_2_0()); 
	    }
		lv_Attributes_2_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStartTagRule());
	        }
       		add(
       			$current, 
       			"Attributes",
        		lv_Attributes_2_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_TAG_CLOSE_3=RULE_TAG_CLOSE
    { 
    newLeafNode(this_TAG_CLOSE_3, grammarAccess.getStartTagAccess().getTAG_CLOSETerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleendTag
entryRuleendTag returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndTagRule()); }
	 iv_ruleendTag=ruleendTag 
	 { $current=$iv_ruleendTag.current; } 
	 EOF 
;

// Rule endTag
ruleendTag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_TAG_END_OPEN_0=RULE_TAG_END_OPEN
    { 
    newLeafNode(this_TAG_END_OPEN_0, grammarAccess.getEndTagAccess().getTAG_END_OPENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEndTagAccess().getTagNameTagNameParserRuleCall_1_0()); 
	    }
		lv_tagName_1_0=ruleTagName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEndTagRule());
	        }
       		set(
       			$current, 
       			"tagName",
        		lv_tagName_1_0, 
        		"TagName");
	        afterParserOrEnumRuleCall();
	    }

)
)this_TAG_CLOSE_2=RULE_TAG_CLOSE
    { 
    newLeafNode(this_TAG_CLOSE_2, grammarAccess.getEndTagAccess().getTAG_CLOSETerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleemptyElement
entryRuleemptyElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmptyElementRule()); }
	 iv_ruleemptyElement=ruleemptyElement 
	 { $current=$iv_ruleemptyElement.current; } 
	 EOF 
;

// Rule emptyElement
ruleemptyElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_TAG_START_OPEN_0=RULE_TAG_START_OPEN
    { 
    newLeafNode(this_TAG_START_OPEN_0, grammarAccess.getEmptyElementAccess().getTAG_START_OPENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmptyElementAccess().getTagNameTagNameParserRuleCall_1_0()); 
	    }
		lv_tagName_1_0=ruleTagName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmptyElementRule());
	        }
       		set(
       			$current, 
       			"tagName",
        		lv_tagName_1_0, 
        		"TagName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEmptyElementAccess().getAttributesAttributeParserRuleCall_2_0()); 
	    }
		lv_Attributes_2_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmptyElementRule());
	        }
       		add(
       			$current, 
       			"Attributes",
        		lv_Attributes_2_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_TAG_EMPTY_CLOSE_3=RULE_TAG_EMPTY_CLOSE
    { 
    newLeafNode(this_TAG_EMPTY_CLOSE_3, grammarAccess.getEmptyElementAccess().getTAG_EMPTY_CLOSETerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleprologTag
entryRuleprologTag returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrologTagRule()); }
	 iv_ruleprologTag=ruleprologTag 
	 { $current=$iv_ruleprologTag.current; } 
	 EOF 
;

// Rule prologTag
ruleprologTag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_PROLOG_START_0=RULE_PROLOG_START
    { 
    newLeafNode(this_PROLOG_START_0, grammarAccess.getPrologTagAccess().getPROLOG_STARTTerminalRuleCall_0()); 
    }
(
(
		lv_name_1_0=	'xml' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getPrologTagAccess().getNameXmlKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrologTagRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "xml");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrologTagAccess().getAttributesAttributeParserRuleCall_2_0()); 
	    }
		lv_Attributes_2_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrologTagRule());
	        }
       		add(
       			$current, 
       			"Attributes",
        		lv_Attributes_2_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_PROLOG_END_3=RULE_PROLOG_END
    { 
    newLeafNode(this_PROLOG_END_3, grammarAccess.getPrologTagAccess().getPROLOG_ENDTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleTagName
entryRuleTagName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTagNameRule()); }
	 iv_ruleTagName=ruleTagName 
	 { $current=$iv_ruleTagName.current; } 
	 EOF 
;

// Rule TagName
ruleTagName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTagNameAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTagNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
    |((
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTagNameAccess().getNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTagNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTagNameAccess().getColonKeyword_1_1());
    }
(
(
		lv_rightName_3_0=RULE_ID
		{
			newLeafNode(lv_rightName_3_0, grammarAccess.getTagNameAccess().getRightNameIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTagNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rightName",
        		lv_rightName_3_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getEqualsSignKeyword_0_1());
    }
(
(
		lv_val_2_0=RULE_STRING
		{
			newLeafNode(lv_val_2_0, grammarAccess.getAttributeAccess().getValSTRINGTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_2_0, 
        		"STRING");
	    }

)
))
    |((
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeAccess().getColonKeyword_1_1());
    }
(
(
		lv_rightName_5_0=RULE_ID
		{
			newLeafNode(lv_rightName_5_0, grammarAccess.getAttributeAccess().getRightNameIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rightName",
        		lv_rightName_5_0, 
        		"ID");
	    }

)
)	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1_3());
    }
(
(
		lv_val_7_0=RULE_STRING
		{
			newLeafNode(lv_val_7_0, grammarAccess.getAttributeAccess().getValSTRINGTerminalRuleCall_1_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_7_0, 
        		"STRING");
	    }

)
)))
;





RULE_PROLOG_START : '<?';

RULE_PROLOG_END : '?>';

RULE_TAG_START_OPEN : '<';

RULE_TAG_END_OPEN : '</';

RULE_TAG_CLOSE : '>';

RULE_TAG_EMPTY_CLOSE : '/>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


